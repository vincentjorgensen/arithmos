//! # arithmos
//!
//! A library for converting Arabic numerals to Classical Attic numerals
//! Library formatting inspired by:
//! https://github.com/AA-Turner/roman-numerals/blob/master/rust/src/lib.rs
//!
//! ## License
//!
//! GNU GPL 3

#![cfg_attr(not(feature = "std"), no_std)]
#![warn(missing_docs)]
#![warn(clippy::std_instead_of_core)]
#![warn(clippy::print_stderr)]
#![warn(clippy::print_stdout)]

use core::fmt;

/// The value of the smallest Greek numeral
pub const MIN: u32 = 0;
/// The value of the largest Greek numeral
pub const MAX: u32 = 999_999;

/// Returned as an error if a numeral is constructed with an invalid input
#[derive(Debug, Clone, Copy, Eq, PartialEq)]
#[non_exhaustive]
pub struct OutOfRangeError;

impl fmt::Display for OutOfRangeError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "Number out of range (must be between 1 and 999,999).")
    }
}

/// A Greek numeral
///
/// Values from 0 to 999,9999 are currently supported
#[non_exhaustive]
#[derive(Debug, Clone, Copy, Eq, PartialEq, Ord, PartialOrd, Hash)]
pub struct GreekNumeral(u32);

impl GreekNumeral {
    /// Creates a ``GreekNumeral`` for any value in range.
    /// Requires ``value`` to be less than 10,000. 0 (ZERO) is acceptable.
    ///
    /// Example
    /// -------
    ///
    /// .. code-block:: rust
    ///
    //     let answer: GreekNumeral = GreekNumeral::new(42).unwrap();
    //     assert_eq!("XLII", answer.to_uppercase());
    ///
    pub const fn new(value: u32) -> Result<Self, OutOfRangeError> {
        if value <= 999_999 {
            // SAFETY: 0 <= value <= 999,999
            Ok(Self(value))
        } else {
            Err(OutOfRangeError)
        }
    }

    /// Return the value of this ``GreekNumeral`` as a ``u32``.
    ///
    /// Example
    /// -------
    ///
    /// .. code-block:: rust
    ///
    ///    let answer: GreekNumeral = GreekNumeral::new(42)?;
    ///    assert_eq!(answer.as_u32(), 42_u32);
    ///
    #[must_use]
    pub const fn as_u32(self) -> u32 {
        self.0
    }

    /// Converts a ``GreekNumeral`` to an uppercase string.
    ///
    /// Example
    /// -------
    ///
    /// .. code-block:: rust
    ///
    ///    let answer: GreekNumeral = GreekNumeral::new(42)?;
    ///    assert_eq!("ŒúŒí'", answer.to_uppercase());
    ///
    #[must_use]
    #[cfg(feature = "std")]
    pub fn to_uppercase(self) -> String {
        let mut out = String::new();
        let mut n = self.0;
        if n == 0 {
            out.push_str(&"êÜä".to_string());
        } else {
            for (_, arithmos) in ARITHMOI.iter().enumerate() {
                while n >= arithmos.arabic {
                    n -= arithmos.arabic;
                    out.push_str(arithmos.u_attic);
                }
            }
        }
        out.push_str(&"'".to_string());
        out
    }

    /// Converts a ``GreekNumeral`` to a lowercase string.
    ///
    /// Example
    /// -------
    ///
    /// .. code-block:: rust
    ///
    ///    let answer: GreekNumeral = GreekNumeral::new(42)?;
    ///    assert_eq!("ŒºŒ≤'", answer.to_lowercase());
    ///
    #[must_use]
    #[cfg(feature = "std")]
    pub fn to_lowercase(self) -> String {
        let mut out = String::new();
        let mut n = self.0;
        if n == 0 {
            out.push_str(&"êÜä".to_string());
        } else {
            for (_, arithmos) in ARITHMOI.iter().enumerate() {
                while n >= arithmos.arabic {
                    n -= arithmos.arabic;
                    out.push_str(arithmos.l_attic);
                }
            }
        }
        out.push_str(&"'".to_string());
        out
    }
}

#[cfg(feature = "std")]
impl fmt::Display for GreekNumeral {
    /// Converts a ``GreekNumeral`` to an uppercase string.
    ///
    /// Example
    /// -------
    ///
    /// .. code-block:: rust
    ///
    ///    let answer: GreekNumeral = GreekNumeral::new(42)?;
    ///    assert_eq!("ŒúŒí'", answer.to_string());
    ///
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str(&self.to_uppercase())
    }
}

// based on https://en.wikipedia.org/wiki/Greek_numerals
#[cfg(feature = "std")]
struct Arabic2GreekStruct<'a> {
    arabic: u32,
    u_attic: &'a str,
    l_attic: &'a str,
}

#[cfg(feature = "std")]
static ARITHMOI: [Arabic2GreekStruct; 54] = [
    Arabic2GreekStruct {
        arabic: 900000,
        u_attic: "Õµœ†",
        l_attic: "Õµœ°",
    },
    Arabic2GreekStruct {
        arabic: 800000,
        u_attic: "ÕµŒ©",
        l_attic: "Õµœâ",
    },
    Arabic2GreekStruct {
        arabic: 700000,
        u_attic: "ÕµŒ®",
        l_attic: "Õµœà",
    },
    Arabic2GreekStruct {
        arabic: 600000,
        u_attic: "ÕµŒß",
        l_attic: "Õµœá",
    },
    Arabic2GreekStruct {
        arabic: 500000,
        u_attic: "ÕµŒ¶",
        l_attic: "ÕµœÜ",
    },
    Arabic2GreekStruct {
        arabic: 400000,
        u_attic: "ÕµŒ•",
        l_attic: "ÕµœÖ",
    },
    Arabic2GreekStruct {
        arabic: 300000,
        u_attic: "ÕµŒ§",
        l_attic: "ÕµœÑ",
    },
    Arabic2GreekStruct {
        arabic: 200000,
        u_attic: "ÕµŒ£",
        l_attic: "ÕµœÉ",
    },
    Arabic2GreekStruct {
        arabic: 100000,
        u_attic: "ÕµŒ°",
        l_attic: "ÕµœÅ",
    },
    Arabic2GreekStruct {
        arabic: 90000,
        u_attic: "Õµœò",
        l_attic: "Õµœô",
    },
    Arabic2GreekStruct {
        arabic: 80000,
        u_attic: "ÕµŒ†",
        l_attic: "ÕµœÄ",
    },
    Arabic2GreekStruct {
        arabic: 70000,
        u_attic: "ÕµŒü",
        l_attic: "ÕµŒø",
    },
    Arabic2GreekStruct {
        arabic: 60000,
        u_attic: "ÕµŒû",
        l_attic: "ÕµŒæ",
    },
    Arabic2GreekStruct {
        arabic: 50000,
        u_attic: "ÕµŒù",
        l_attic: "ÕµŒΩ",
    },
    Arabic2GreekStruct {
        arabic: 40000,
        u_attic: "ÕµŒú",
        l_attic: "ÕµŒº",
    },
    Arabic2GreekStruct {
        arabic: 30000,
        u_attic: "ÕµŒõ",
        l_attic: "ÕµŒª",
    },
    Arabic2GreekStruct {
        arabic: 20000,
        u_attic: "ÕµŒö",
        l_attic: "ÕµŒ∫",
    },
    Arabic2GreekStruct {
        arabic: 10000,
        u_attic: "ÕµŒô",
        l_attic: "ÕµŒπ",
    },
    Arabic2GreekStruct {
        arabic: 9000,
        u_attic: "ÕµŒò",
        l_attic: "ÕµŒ∏",
    },
    Arabic2GreekStruct {
        arabic: 8000,
        u_attic: "ÕµŒó",
        l_attic: "ÕµŒ∑",
    },
    Arabic2GreekStruct {
        arabic: 7000,
        u_attic: "ÕµŒñ",
        l_attic: "ÕµŒ∂",
    },
    Arabic2GreekStruct {
        arabic: 6000,
        u_attic: "ÕµŒï",
        l_attic: "ÕµŒµ",
    },
    Arabic2GreekStruct {
        arabic: 5000,
        u_attic: "ÕµŒï",
        l_attic: "ÕµŒµ",
    },
    Arabic2GreekStruct {
        arabic: 4000,
        u_attic: "ÕµŒî",
        l_attic: "ÕµŒ¥",
    },
    Arabic2GreekStruct {
        arabic: 3000,
        u_attic: "ÕµŒì",
        l_attic: "ÕµŒ≥",
    },
    Arabic2GreekStruct {
        arabic: 2000,
        u_attic: "ÕµŒí",
        l_attic: "ÕµŒ≤",
    },
    Arabic2GreekStruct {
        arabic: 1000,
        u_attic: "ÕµŒë",
        l_attic: "ÕµŒ±",
    },
    Arabic2GreekStruct {
        arabic: 900,
        u_attic: "œ†",
        l_attic: "œ°",
    },
    Arabic2GreekStruct {
        arabic: 800,
        u_attic: "Œ©",
        l_attic: "œâ",
    },
    Arabic2GreekStruct {
        arabic: 700,
        u_attic: "Œ®",
        l_attic: "œà",
    },
    Arabic2GreekStruct {
        arabic: 600,
        u_attic: "Œß",
        l_attic: "œá",
    },
    Arabic2GreekStruct {
        arabic: 500,
        u_attic: "Œ¶",
        l_attic: "œÜ",
    },
    Arabic2GreekStruct {
        arabic: 400,
        u_attic: "Œ°",
        l_attic: "œÅ",
    },
    Arabic2GreekStruct {
        arabic: 300,
        u_attic: "Œ°",
        l_attic: "œÅ",
    },
    Arabic2GreekStruct {
        arabic: 200,
        u_attic: "Œ£",
        l_attic: "œÉ",
    },
    Arabic2GreekStruct {
        arabic: 100,
        u_attic: "Œ°",
        l_attic: "œÅ",
    },
    Arabic2GreekStruct {
        arabic: 90,
        u_attic: "œò",
        l_attic: "œô",
    },
    Arabic2GreekStruct {
        arabic: 80,
        u_attic: "Œ†",
        l_attic: "œÄ",
    },
    Arabic2GreekStruct {
        arabic: 70,
        u_attic: "Œü",
        l_attic: "Œø",
    },
    Arabic2GreekStruct {
        arabic: 60,
        u_attic: "Œû",
        l_attic: "Œæ",
    },
    Arabic2GreekStruct {
        arabic: 50,
        u_attic: "Œù",
        l_attic: "ŒΩ",
    },
    Arabic2GreekStruct {
        arabic: 40,
        u_attic: "Œú",
        l_attic: "Œº",
    },
    Arabic2GreekStruct {
        arabic: 30,
        u_attic: "Œõ",
        l_attic: "Œª",
    },
    Arabic2GreekStruct {
        arabic: 20,
        u_attic: "Œö",
        l_attic: "Œ∫",
    },
    Arabic2GreekStruct {
        arabic: 10,
        u_attic: "Œô",
        l_attic: "Œπ",
    },
    Arabic2GreekStruct {
        arabic: 9,
        u_attic: "Œò",
        l_attic: "Œ∏",
    },
    Arabic2GreekStruct {
        arabic: 8,
        u_attic: "Œó",
        l_attic: "Œ∑",
    },
    Arabic2GreekStruct {
        arabic: 7,
        u_attic: "Œñ",
        l_attic: "Œ∂",
    },
    Arabic2GreekStruct {
        arabic: 6,
        u_attic: "œú",
        l_attic: "œù",
    },
    Arabic2GreekStruct {
        arabic: 5,
        u_attic: "Œï",
        l_attic: "Œµ",
    },
    Arabic2GreekStruct {
        arabic: 4,
        u_attic: "Œî",
        l_attic: "Œ¥",
    },
    Arabic2GreekStruct {
        arabic: 3,
        u_attic: "Œì",
        l_attic: "Œ≥",
    },
    Arabic2GreekStruct {
        arabic: 2,
        u_attic: "Œí",
        l_attic: "Œ≤",
    },
    Arabic2GreekStruct {
        arabic: 1,
        u_attic: "Œë",
        l_attic: "Œ±",
    },
];

impl TryFrom<u8> for GreekNumeral {
    type Error = OutOfRangeError;

    /// Creates a ``GreekNumeral`` from an ``u8``.
    ///
    /// Returns ``GreekNumeral`` or ``OutOfRangeError``.
    fn try_from(value: u8) -> Result<Self, OutOfRangeError> {
        Self::new(u32::from(value))
    }
}

impl TryFrom<u16> for GreekNumeral {
    type Error = OutOfRangeError;

    /// Creates a ``GreekNumeral`` from an ``u16``.
    ///
    /// Returns ``GreekNumeral`` or ``OutOfRangeError``.
    fn try_from(value: u16) -> Result<Self, OutOfRangeError> {
        Self::new(u32::from(value))
    }
}

impl TryFrom<u32> for GreekNumeral {
    type Error = OutOfRangeError;

    /// Creates a ``GreekNumeral`` from an ``u32``.
    ///
    /// Returns ``GreekNumeral`` or ``OutOfRangeError``.
    fn try_from(value: u32) -> Result<Self, OutOfRangeError> {
        Self::new(value)
    }
}

impl TryFrom<u64> for GreekNumeral {
    type Error = OutOfRangeError;

    /// Creates a ``GreekNumeral`` from an ``u64``.
    ///
    /// Returns ``GreekNumeral`` or ``OutOfRangeError``.
    fn try_from(value: u64) -> Result<Self, OutOfRangeError> {
        u32::try_from(value).map_or(Err(OutOfRangeError), Self::new)
    }
}

impl TryFrom<u128> for GreekNumeral {
    type Error = OutOfRangeError;

    /// Creates a ``GreekNumeral`` from an ``u128``.
    ///
    /// Returns ``GreekNumeral`` or ``OutOfRangeError``.
    fn try_from(value: u128) -> Result<Self, OutOfRangeError> {
        u32::try_from(value).map_or(Err(OutOfRangeError), Self::new)
    }
}

impl TryFrom<usize> for GreekNumeral {
    type Error = OutOfRangeError;

    /// Creates a ``GreekNumeral`` from an ``usize``.
    ///
    /// Returns ``GreekNumeral`` or ``OutOfRangeError``.
    fn try_from(value: usize) -> Result<Self, OutOfRangeError> {
        u32::try_from(value).map_or(Err(OutOfRangeError), Self::new)
    }
}

impl TryFrom<i8> for GreekNumeral {
    type Error = OutOfRangeError;

    /// Creates a ``GreekNumeral`` from an ``i8``.
    ///
    /// Returns ``GreekNumeral`` or ``OutOfRangeError``.
    fn try_from(value: i8) -> Result<Self, OutOfRangeError> {
        u32::try_from(value).map_or(Err(OutOfRangeError), Self::new)
    }
}

impl TryFrom<i16> for GreekNumeral {
    type Error = OutOfRangeError;

    /// Creates a ``GreekNumeral`` from an ``i16``.
    ///
    /// Returns ``GreekNumeral`` or ``OutOfRangeError``.
    fn try_from(value: i16) -> Result<Self, OutOfRangeError> {
        u32::try_from(value).map_or(Err(OutOfRangeError), Self::new)
    }
}

impl TryFrom<i32> for GreekNumeral {
    type Error = OutOfRangeError;

    /// Creates a ``GreekNumeral`` from an ``i32``.
    ///
    /// Returns ``GreekNumeral`` or ``OutOfRangeError``.
    fn try_from(value: i32) -> Result<Self, OutOfRangeError> {
        u32::try_from(value).map_or(Err(OutOfRangeError), Self::new)
    }
}

impl TryFrom<i64> for GreekNumeral {
    type Error = OutOfRangeError;

    /// Creates a ``GreekNumeral`` from an ``i64``.
    ///
    /// Returns ``GreekNumeral`` or ``OutOfRangeError``.
    fn try_from(value: i64) -> Result<Self, OutOfRangeError> {
        u32::try_from(value).map_or(Err(OutOfRangeError), Self::new)
    }
}

impl TryFrom<i128> for GreekNumeral {
    type Error = OutOfRangeError;

    /// Creates a ``GreekNumeral`` from an ``i128``.
    ///
    /// Returns ``GreekNumeral`` or ``OutOfRangeError``.
    fn try_from(value: i128) -> Result<Self, OutOfRangeError> {
        u32::try_from(value).map_or(Err(OutOfRangeError), Self::new)
    }
}

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn test_greek_numeral_new() {
        assert_eq!(GreekNumeral::new(0), Ok(GreekNumeral(0_u32)));
        assert_eq!(GreekNumeral::new(1), Ok(GreekNumeral(1_u32)));
        assert_eq!(GreekNumeral::new(1_u8.into()), Ok(GreekNumeral(1_u32)));
        assert_eq!(GreekNumeral::new(1_u32), Ok(GreekNumeral(1_u32)));
        assert_eq!(GreekNumeral::new(42), Ok(GreekNumeral(42_u32)));
        assert_eq!(GreekNumeral::new(616), Ok(GreekNumeral(616_u32)));
        assert_eq!(GreekNumeral::new(49_999), Ok(GreekNumeral(49_999_u32)));
        assert_eq!(GreekNumeral::new(99_999), Ok(GreekNumeral(99_999_u32)));
        assert_eq!(GreekNumeral::new(999_999), Ok(GreekNumeral(999_999_u32)));
        assert_eq!(GreekNumeral::new(MAX), Ok(GreekNumeral(999_999_u32)));
        assert!(matches!(GreekNumeral::new(1_000_000), Err(OutOfRangeError)));
        assert!(matches!(GreekNumeral::new(u32::MAX), Err(OutOfRangeError)));
    }

    #[test]
    fn test_try_from_one() {
        assert_eq!(GreekNumeral::try_from(1_u8), Ok(GreekNumeral(1_u32)));
        assert_eq!(GreekNumeral::try_from(1_u16), Ok(GreekNumeral(1_u32)));
        assert_eq!(GreekNumeral::try_from(1_u32), Ok(GreekNumeral(1_u32)));
        assert_eq!(GreekNumeral::try_from(1_u64), Ok(GreekNumeral(1_u32)));
        assert_eq!(GreekNumeral::try_from(1_u128), Ok(GreekNumeral(1_u32)));
        assert_eq!(GreekNumeral::try_from(1_usize), Ok(GreekNumeral(1_u32)));
        assert_eq!(GreekNumeral::try_from(1_i8), Ok(GreekNumeral(1_u32)));
        assert_eq!(GreekNumeral::try_from(1_i16), Ok(GreekNumeral(1_u32)));
        assert_eq!(GreekNumeral::try_from(1_i32), Ok(GreekNumeral(1_u32)));
        assert_eq!(GreekNumeral::try_from(1_i64), Ok(GreekNumeral(1_u32)));
        assert_eq!(GreekNumeral::try_from(1_i128), Ok(GreekNumeral(1_u32)));
    }

    //    #[test]
    //    #[cfg(feature = "std")]
    //    fn test_roman_numeral_round_trip() {
    //        for i in 1..=49_999 {
    //            let r = GreekNumeral::new(i).unwrap().to_string();
    //            let parsed: GreekNumeral = r.parse().unwrap();
    //            let val = parsed.0;
    //            assert_eq!(val, i);
    //        }
    //    }
}
